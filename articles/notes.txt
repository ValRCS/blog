2017-12-22
Id: b8uonguv5i7kk5ug69i0
#did
blog: added -watch option that rebuilds netlify_static when source files change. Makes easier to test changes locally.

2017-12-18
Id: b8s5gn6v5i7ju0dh01k0
#idea

Self-hosted blog on https://firebase.google.com/.

Core insight: Cloud Firestore database has a free usage tier big enough  to make hosting a personal blog essentially free. Firebase also provides enough of a backend functionality to implement a blog (authentication, database etc.).

One could build a single page app that includes all the important functionality of a blog.

USP (Unique Selling Proposition) would be:
* cheap (almost free) to host
* easy to deploy (follow a tutorial custom written for the software)
* many themes (write it so that it can use e.g. Hugo or Jekyll themes)

Written in Vue.

Unfortunately, there's no money in it.

2017-12-13
Id: b8p31jqie3f3po79m5rg
#did
Sumatra code cleanups.

2017-12-12
Id: b8p35uaie3f3n04cibdg
#did
Sumatra code cleanups.

2017-12-10
Id: b8p35uaie3f3n04cibe0
#did
Sumatra code cleanups.

2017-12-09
Id: b8p39juv5i7ja8u2ko7g
#did
Sumatra code cleanups.

2017-12-08
Id: b8p39juv5i7ja8u2ko80
#did
Sumatra code cleanups.

2017-12-07
Id: b8kt10uv5i7ll06ge8o0
#did
blog: replaced use of highlight.js for syntax-highlighting with chroma Go library. It's even more static.

blog: rewriting regen.py in Go.

2017-12-06
Id: b8kch8mv5i7j30kcvr20
#did
Deployed blog to netlify. Removed the code not related to netlify.

2017-12-02
Id: b8hqgnmv5i7uuf54b6e0
#did

Porting blog to netlify.

2017-11-29
Id: b8fqv02fss0000aovdk0
#did

In Sumatra, fixed a regression due careless coding and not running changed code at all.

For easier tracking of mem leaks, added ./scripts/valgrind_rel.sh scripts that builds the unix version and runs valgrind with mem leak detection. Gave me a pointer for TxtParser leak location. Unfortunately requires redoing by removing TxtParser::children std::vector because in one code path we allocate nodes from pool allocator and in another path with new. It was fine when we used Vec, which used the same allocator for internal allocations, but now std::vector uses new() and in one code path it's intermixed with allocator.

We should get rid of TxtParser::children and instead keep child list as pointers TxtNode, either first child or sibling for n-th child.

2017-11-28
Id: b8f2coifss0000aovdh0
#did

Converting Sumatra's unix build from premake5.unix.lua to a Go program.

This is my second attempt at such a tool. Before I was too ambitious and tried to abstract too much from start.

This time I did it in a straightforward, sequential way and it seems to be working.

2017-11-24
Id: b8cbvh10rm7g009pfvsg
Title: Typo-resistant way of using #define in C++.
#programming

Sometimes you just have to use #ifdef. Let's say you're writing cross-platform code and your `read_file` function needs different implementation for mac and windows. You would do it like this:
```c++
#if defined(_WIN32)
std::vector<char> read_file(std::string& path) { ... }
#endif

#if defined(__APPLE__)
std::vector<char> read_file(std::string& path) { ... }
#endif
```

Using `_WIN32` and `__APPLE__` is a bit ugly. Let's do something more uniform:
```c++
#if defined(_WIN32)
#define OS_WIN 1
#endif

#if defined(__APPLE__)
#define OS_MAC 1
#endif

#if defined(OS_WIN)
std::vector<char> read_file(std::string& path) { ... }
#endif

#if defined(OS_MAC)
std::vector<char> read_file(std::string& path) { ... }
#endif
```

It looks better but has a problem: typos are silent bugs:
```
#if defined(OS_MAP)
...
#endif
```

Thankfully newer versions of gcc and clang have a useful option `-Wundef` which produces a warning when you do `#if FOO` and `FOO` is not defined.

Knowing that, the final version of our code is:
```c++
#if defined(_WIN32)
#define OS_WIN 1
#else
#define OS_WIN 0
#endif

#if defined(__APPLE__)
#define OS_MAC 1
#else
#define OS_MAC 0
#endif

#if OS_WIN
std::vector<char> read_file(std::string& path) { ... }
#endif

#if OS_MAC
std::vector<char> read_file(std::string& path) { ... }
#endif
```

It's not without downsides: now `#ifdef OS_MAC` is always true, so you need the discipline to use `#if`. That discipline can be enforced with a regex over your code base.

On Windows, msvc has a similar warning 4668. Unfortunately, system headers produce a lot of those warnings.

There are 2 solutions.

You can enable this warning globally and disable when including system headers:
```c++
#pragma warning(push)
#pragma warning(disable : 4668) // silence /analyze: de-referencing a nullptr pointer
#endif
#include <windows.h>
... and other system headers
#pragma warning(pop)
```

Another option is to have the warning off by default but enable it after including system headers:
```c++
#include <windows.h>
....

#pragma warning(default : 4668)

... now only your code
```

I use a variation of second method. To avoid enabling that warning in each .cpp file, I have a `common.h` header files which includes most of the system headers and enables the warning. You can re-use `stdafx.h` for that.

2017-11-23
Id: b8bmm8sau0kg00eesncg
Reading http://www.robertgaskins.com/powerpoint-history/sweating-bullets/gaskins-sweating-bullets-webpdf-isbn-9780985142414.pdf about history of PowerPoint software.

Some thoughts:
* I never understood how big the market was for PowerPoint and why it was so big. It shows that we all are blind to problems we don't encounter ourselves. PowerPoint, the software, worked because the person who designed it understood that in businesses a lot of people give presentation, they were already spending a lot of money on making slides and a computer with a GUI would be a good tool to make making slides easier and give people more control over the process
* the success of Windows over Mac OS was not at all guaranteed. Mac shipped earlier and Microsoft had to do a lot of catching up, technologically
* even the best market analysis is not guaranteed. They had pick on which OS to bet (Windows or Mac) before any of them shipped. They picked the right strategy (target Mac first, as it shipped first, but keep Windows in mind and ship for Windows as quickly as they could).

2017-09-27
Id: b762hmrg59cg00dlut20
#did
* started on parsing of the html

2017-09-26
Id: b75hp73g59cg00dlupag
#did
* tweaked API of https://github.com/kjk/siser
* started on winapigen

2017-08-04
Id: b62j0iar61n000cfq3ug
#did
* wrote https://blog.kowalczyk.info/article/9/tutorial-on-using-github.comkjkflex-go-package.html
* https://github.com/kjk/flex: implemented FooToString for enum -> string; synced to latest Yoga by porting https://github.com/facebook/yoga/commit/f45059e1e696727c1282742b89d2c8bf06345254
* https://news.ycombinator.com/item?id=14928177 landed on main page

2017-07-23
Id: b5qika5d47eg00dqiup0
#did
* more porting Yoga to Go https://github.com/kjk/flex. Making the code look more like Go code.

2017-07-22
Id: b5qik8ld47eg00dqiuog
#did
* more porting Yoga to Go https://github.com/kjk/flex. Things actually work.

2017-07-21
Id: b5qil95d47eg00dqiupg
#did
* more porting Yoga to Go

2017-07-20
Id: b5qik6ld47eg00dqiuo0
#did
* started porting Yoga to Go https://github.com/kjk/flex

2017-07-15
Id: b5l9mteks5pg00eg5adg
#did
* tweaked draft articles
* started on linkchecker https://github.com/kjk/go-cookbook/tree/master/web-crawl
* find files: started on a website

2017-07-14
Id: b5kjaikh5sog00anr320
Title: Idea for a GitHub wiki editor
#idea

GitHub has wikis but they are merely passable, not good:
* the editing UI is very bare bones
* the way they are displayed could also be improved

Idea: build a better editor and a better publishing for the wiki.

Technology: build a better markdown editor like http://dillinger.io/ or https://stackedit.io/ or https://hackmd.io/. It's simple.

GitHub wiki is just a repository. If your project is foo/bar, main repo is github.com/foo/bar.git and wiki repo is github.com/foo/bar.wiki.git

Unclear how to get commit rights. In the worst case scenario could fork the repo and provide instructions for how to manually merge into main repo. Hopefully it's possible to do from GitHub API.

Business model: either charge individuals a little bit per month ($2-$10) for the editor or make public repos free and charge more for prive repos, like $30/month. The idea here is that private repos are used by companies, which can afford to pay more.

Free access for public repos would act as free advertisement.

The business idea is similar to other companies built on top of GitHub, like https://www.zenhub.com/

---

Id: b5kl18kh5sog00anr32g
#did
* find files: context menu for listbox
* sumatra: merged https://github.com/sumatrapdfreader/sumatrapdf/pull/844 and did some minor cleanups

2017-07-13
Id: b5k2rbsh5sog00anr2vg
#did
* find files: working on search in Go version

2017-07-12
Id: b5jqt9o6uldg00d4dfc0

#did
* started writing https://github.com/kjk/go-windows-programming
* more work debugging the crash https://github.com/kjk/go20975
* promotion: https://www.reddit.com/r/golang/comments/6n378e/embedding_build_number_in_go_executable/

2017-07-11
Id: b5imtggqmi0g00blgfag
#did #seo
* experimenting turning https://github.com/AnthonyCalandra/modern-cpp-features into a better reference guide, using styling from https://diskprices.com/
* updated https://blog.kowalczyk.info/article/1Bkr/3-ways-to-iterate-in-go.html with cancellable channel
* moved Go Cookbook articles from quicknotes to under /books/go-cookbook. Markdown preview is
* find files: made Go version dpi-scalable
* read https://www.springzo.com/saga/simple-organic-traffic-strategy-14

2017-07-10
Id: b5i0apm41rb0009ik8f0
#did
* promotion: https://www.reddit.com/r/golang/comments/6mgp8f/3_ways_to_iterate_in_go/
* opened https://github.com/golang/go/issues/20975 for windows crash with mshtml
* fixed urls for og:url and og:image for blog articles
* find files: save index, load index
* posted http://discuss.bootstrapped.fm/t/talk-to-business-owners-and-find-their-problems/5146/3?u=kjk

2017-07-09
Id: b5h9oa1642d0009t1pq0
#did
* testing https://github.com/lxn/walk for writing Windows programs in Go. Rewrote indexing part of Find Files

2017-07-08
Id: b5gjb3ck1jqg00a74m6g

#did
* have draft articles on the blog so that I can link to them and they are indexed but not shown on index page
* seriously improved serialization speed of https://github.com/kjk/siser

2017-07-07
Id: b5g73k4k1jqg00a74lm0

#did
* tweaked https://blog.kowalczyk.info/article/5/blueprint-for-deploying-web-apps-on-coreos.html

2017-07-06
Id: b5fbut97obc000d2gegg

#did #business #seo
* read https://www.julian.com/learn/growth/landing-pages about good landing pages
* finished reading "Content Machine"
* added a form to send me e-mail directly from https://blog.kowalczyk.info/contactme.html
* https://www.reddit.com/r/Entrepreneur/comments/6lmotf/i_make_10000_per_month_with_the_amazon_affiliate/, https://news.ycombinator.com/item?id=14715384 : guy makes $10k/month by writing content and making money from Amazon affilate fees
* improvement to the blog (draft status for articles, description of articles, added sitemap.xml, added mobile-friendly scaling meta tag)

2017-07-05
Id: b5ervr96nr6g00d5uvag

#did
* wrote https://www.indiehackers.com/forum/post/-KoKcDV2v00GSJJexkLB?commentId=-KoL4ixaUf_VxQvpE-DM
* promotion: https://www.reddit.com/r/javascript/comments/6lghvo/optimizing_javascript_by_using_arrays_instead_of/
* continue reading "Content Machine"
* created https://blog.kowalczyk.info/book/go-cookbook.html

2017-07-03
Id: b5dl2dh2k0c000f4gefg
#did
* published https://blog.kowalczyk.info/article/Jl3G/https-for-free-in-go.html and announced on r/golang
* published https://dev.to/kjk/advanced-command-execution-in-go-with-osexec
* find files: progress on build script

2017-07-02
Id: b5csj7r7nu9g00amnno0

#did
* finished "3 ways to iterate in Go"
* blog: published "HTTPS for free in Go"

2017-07-01
Id: b5cocf3fu44000dr4vi0

#did
* find files: separate status line for each drive

2017-06-30
Id: b5bcrm1impb000a8ptrg

Did:
* find files: fixed !cs search
* find files: implement !no (name only) option
* find files: speed up GetOverlappedParts()
* find files: add 'Copy File Path' and 'Copy File Name' context menu items
* find files: misc code tweaks

2017-06-29
Id: b5as5ipimpb000a8psg0

#did
* reading http://fd.fabiensanglard.net/doom3/pdfs/johnc-interviews.pdf

2017-06-24
Id: b5715ipimpb000a8pkrg

#did
* find files: show horizontall scrollbar

2017-06-23
Id: b56duos4ec4000e14f50
#did
* quicknotes: hopefully fixed the issue of stale notes on startup
* quicknotes: fixed staring/unstaring in note view
* quicknotes: made links in markdown preview to be _target=blank
* quicknotes: re-enabled redirect to https
* published https://blog.kowalczyk.info/article/wjRD/collected-stories-of-solo-founder-with-profitable-businesses-for-your-startup-inspiration.html
* quicknotes: fully switched to showdown.js, removed marked and markdown-it (saved ~205 kB of JS)
* quicknotes: spent way too much time but hopefully fixed spurious updates of createdat time of notes when updating them
* posted https://www.indiehackers.com/forum/post/-KnKqFrQ7t7vJSV73jjb?commentId=-KnL8CC2JRhUL9YNnyk2
* posted http://discuss.bootstrapped.fm/t/hi-im-tim-and-im-building-a-branded-forms-service/5121/4?u=kjk

2017-06-22
Id: b56bt3c4ec4000e14e50

#did
* added example for writing to stdin to https://blog.kowalczyk.info/article/wOYk/advanced-command-execution-in-go-with-osexec.html
* quicknotes: fixed updating CreatedAt time for note when only UpdatedAt should be updated

2017-06-20
Id: b54egafee28000b4mmr0

#did
* published https://blog.kowalczyk.info/article/JyRZ/generating-good-random-and-unique-ids-in-go.html

2017-06-18
Id: b53nkffee28000b4mma0
#did

* survived very hot day
* wrote draft of "3 ways to iterate in Go"
* left angry comments on HN. Shouldn't do that.
* wrote http://discuss.bootstrapped.fm/t/critique-idea-collaborative-screen-sharing/5105/2
* wrote https://www.indiehackers.com/forum/post/-KmyIfWqa9bNPdiO_Veq?commentId=-KmyLD1Tnwpa8CH2WXMl

2017-06-17
Id: b52r6cvee28000b4mm6g

#business #payments

Selling downloadable content:
* Gumroad
* Paddle
* FastSpring
* SendOwl

Links:
* http://discuss.bootstrapped.fm/t/gumroad-alternatives/5103
* http://discuss.bootstrapped.fm/t/gumroad-alternative/4631
* https://news.ycombinator.com/item?id=11356560

---

Id: b52r6inee28000b4mm70
#idea

Make web version of https://www.watermark-image.com/ (which makes $3k-$5k as desktop app). Allow limited free use. Upsell Mac/Windows app.

2017-06-16
Id: b524f388mmmg00eqcokg
#did
* blog: implemented a system to use header images when post has @header-image meta-data at the top
* blog: prototypes adding title to header image http://i.imgur.com/7rxCjVE.png The code for that:

```html
<div class="article-header hide-mobile" style="position: relative">
  <img class="hide-mobile" src="/gfx/headers/header-02.jpg">
  <div style="position:absolute;bottom:0px;left:0px;padding:0.5em 1em; background-color:white;color:black;opacity:.7;font-size:18pt;font-weight: bold">
    Advanced command execution in Go with os/exec
  </div>
</div>
```

2017-06-15
Id: b51424u9krpg00db2sn0
#did
* quicknotes: send list of recently created/modified notes in #quicknotes
* posted https://www.indiehackers.com/forum/post/-Kmh4fJjATyvFeHFEXzH?commentId=-KmhOcV6-EZXq65g8F99
* created many header images

2017-06-14
Id: b50emcq8i1lg00d84r70
#vue

Vue.js notes.

```
div#app
  p v-if="seen"
    {{ message | capitalize }}
  p v-else
    shown if not seen
  span v-bind:title="message"
  span :title="message"
  ol
    li v-for="todo in todos"
      {{ todo.text }}
  button v-on:click="reverseMessage"
  button @click="reverseMessage"
  input v-model="message"
  div v-html="rawHtml"
  div v-for="(value, key, index) in object"
```

```javascript
new Vue({
  el: "#app",
  data: {
    seen: true,
    message: "my messge",
    todos: [
      { text: "todo 1" },
      { text: "todo 2" },
    ],
    rawHtml: "<p>is html</p>",
  },
  methods: {
    reverseMessage: function() {
      this.message = reverse(this.message);
    },
  filters: {
    capitalize: function (value) {
      if (!value) return '';
      value = value.toString();
      return value.charAt(0).toUpperCase() + value.slice(1);
    }
  },
  computed: {
    reversedMessageComputed: function() {
      return reverse(this.message);
    }
  },
})
```

https://vuejs.org/v2/api/#v-on
event bindings modifiers (e.g. @onclick.stop):
 * stop, prevent, capture, self, native, once

Links:
* https://css-tricks.com/intro-to-vue-1-rendering-directives-events/
* https://alligator.io/vuejs/vue-placeholders/
* https://medium.freecodecamp.com/vue-js-introduction-for-people-who-know-just-enough-jquery-to-get-by-eab5aa193d77

---

Id: b50te8a8i1lg00d84r90
#business #book
* https://personalmba.com
* http://changethis.com/manifesto/98.02.PersonalMBA/pdf/98.02.PersonalMBA.pdf
* "Go it Alone" full book http://brucejudson.com/

---

Id: b50osea8i1lg00d84r7g
#webdev
https://github.com/dexteryy/spellbook-of-modern-webdev : large list of links for all web dev things

---

Id: b50ouda8i1lg00d84r80
#webdev #canvas
http://chimera.labs.oreilly.com/books/1234000001654/index.html is a full book about HTML5 Canvas

---

Id: b50racq8i1lg00d84r8g

#did
* failed to implement moving div on the page using drag events with vue.js
* implemented moving ov div element using mousedown/mousemove/mouseup and tracking x/y offset from positioned saved in mousedown
* blog: added tag list to week/tag views; fixed tag detection

2017-06-13
Id: b5057b05bmm000eh92kg
#did
* working on link checker using https://github.com/knq/chromedp. Failure becuse couldn't tell 404 from 200 using their API
* started on image drag&drop with vue.js
* read about http://tachyons.io/ css framework

---

Id: b5057u85bmm000eh92l0

#cdp #chrome

Chrome dev tools protocol resources:
* https://github.com/ChromeDevTools/awesome-chrome-devtools
* https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md
* https://chromedevtools.github.io/devtools-protocol/
* https://developers.google.com/web/updates/2017/04/headless-chrome

Go libraries:
* https://github.com/mafredri/cdp : most high-level
* https://github.com/raff/godet : low-level
* https://github.com/wirepair/gcd : low-level

---

Id: b5064105bmm000eh92pg

Website/uptime monitoring:
* https://www.site24x7.com $9 for 10 monitors
* https://www.pingdom.com $11 for 10 checks
* https://www.statuscake.com, free plan with unclear limits, $25 for 50 tests
* https://uptimerobot.com, free plan 50 checks, additional 50 checks for $4.5 (decreases with scale)
* https://newrelic.com

---

Id: b5080e85bmm000eh92q0

#idea

Write a simple source code indexer for C++ code. Use it for Sumatra code.
Others:
* http://free-electrons.com/blog/elixir/
* https://sourceforge.net/projects/lxr/
* https://github.com/OpenGrok/OpenGrok (java)
* https://grokbit.com/sumatrapdfreader/sumatrapdf/ref/master/

Combines searching with browsing.

---

Id: b509a385bmm000eh92qg
#adsense #seo

Some notes on using adsense well: https://www.reddit.com/r/Entrepreneur/comments/6gveyw/ive_seen_a_lot_of_google_adwords_posts_that_lack/. Has links to online seo tools.

---

Id: b50ab985bmm000eh92tg
#webdev #javascript

https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications

FileReader
  event handlers:
    onloadstart
    onprogress
    onloadend : failure or success
    onload : on success, (evt) => { evt.target.result is the data }
    onabort
    onerror
  methods
    abort
    readAsArrayBuffer : result will be ArrayBuffer
    readAsBinaryString : result will be binary data as string
    readAsDataURL : result will be data: URL
    readAsText : result will be content as string

---

Id: b50apto5bmm000eh92u0
#idea

Build a GUI version of https://github.com/johnkerl/miller

The weakness of such cmd-line tools is that they require writing of the whole sequence of operations up-front. There are 3 problems with that:
* the syntax is rather arcane
* the user doesn't see the data he's operating on
* mistakes are costly i.e. changing the operations has to redo all computation from scratch

A better approach is to allow humans multi-step refinements of data in a UI that shows the preview of the operations.

For example, the operation:

$ mlr --icsv --opprint --barred \
  put '$tiv_delta = $tiv_2012 - $tiv_2011; unset $tiv_2011, $tiv_2012' \
  then sort -nr tiv_delta flins.csv

Would be done as sequence of steps.
> load flins.csv
$1: 215 records
show first 10 records + headers

> add tiv_delta = $tiv_2012 - $tiv_2011
$2: 215 records
... 10 record preview

> remove tiv_2011 tiv_2012
$3: 215 records
... 10 record preview

> sort by tiv_delta
$4: 215 records
... 10 record preview

> save flins_sorted.csv

"add", "remove", "sort by", "save" are operations that work on list of records.
If argument is not provided, it's implicitly the last result.
The argument can be explicilty provided e.g.:
> $2 save flins_sorted_2.csv

---

Id: b4vod3f8m63000aqbjpg
#seo
https://inside.6q.io/blogging-for-startups/ is a case study of attracting website traffic by writing blog posts.

2017-06-12
Id: b4uug944qnvg00eh2keg
#go #rant

There's a famous quote "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.".

I've never seen anyone disagree with that and yet Go, the only language that takes this principle seriously, is visciously denigrated because it didn't add all those features that could possibly be added. Generics, fancy type system, optionals, non-nullable types, unions, exceptions.

I think it shows that most people don't really understand the quote. They think that the opposite is "don't add unnecessary features" and who would be in favor of unnecessary features?

But what the quote is really saying is: "you should resist adding features, even though they are useful; their cost is additional complexity and you should strive to keep complexity to minimum while still providing core value".

It's easy to agree with such a sentiment in abstract but when you start talking about concrete features, this wisdom suddenly disappears.

Features sell. The value of a feature is easy to visualise, the value of simplicity due to lack of the feature is not.

---

Id: b4vdfhg1n8a000c8qrtg
#idea Write windows desktop app like https://github.com/soheilpro/mon. Do it either the hard way (pure win32) or C# or sciter.

---

Id: b4vksu78m63000aqbjo0
Title: Summary of "Sell to Strangers" video about content marketing

#seo

Summary of "Sell to Strangers" 20 min video about content marketing (https://audienceops.com/resources/videos/sell-to-strangers/).

TOFU: Top of Funnel conent is how you attract users first e.g. social posts or blog articles.

MOFU: Middle of Funnel content helps people understand what your product does e.g. customer case study articles or e-mail blast sequences.

BOFU: Bottom Of Funnel assets help people make buying decision e.g. pricing page, faq, free samples, sales demo.

BOFU is something you must have to sell a product.

In order to grow the business, you need more TOFU and MOFU content to drive new people to your website.

5 essential content assets:

  1. Evergreen articles
  2. Lead Magnets
  3. Emails
  4. Case Studies
  5. Social Media posts

Evergreen articles: blog posts, books etc. that provide value now and in the future.

Lead magnets are articles meant to incentivize people to sign up to your mailing list.

2 types of lead magnets:

1. Content Upgrade : bonus content (e.g. delivered as PDF) attached to evergreen article. Visitor has to provide mailing list to receive bonus content.

2. Global Lead Magnet : longer assets (e.g. an e-book or e-mail drip course) that you can promote independently.

Email tips:
* within first 2 weeks send optimized drip e-mail campaign to new subscribers
* consistent follow up: send weekly follow up newsletters to stay top-of-mind
* repurpose content: re-use articles as e-mail content
* make emails plain text and personalize them

Case studies: like testimonials, they provide social proof that your product works.

Tweet and use facebook posts to promote your content on social channels.

You can promote your evergreen articles as re-targeted ads on Facebook.

---

Id: b4vgfsg1n8a000c8qrvg
#flexbox #css
Title: Flexbox summary.

Properties on flex container:
  display: flex
  flex-direction: row | row-reverse | column | column-reverse
  flex-wrap: nowrap | wrap | wrap-reverse
  align-items: flex-start | flex-end | center | baseline | stretch
    for row, it's: top | bottom | center | baseline | fill dy
    for column, it's: left | rigth | center | baselne | fill dx
  justify-content: flex-start | flex-end | space-between | center | space-around
    how remaining space is distributed
  align-content: flex-start | flex-end | center | space-between | space-around | stretch

Properties of flex items:
  align-self: auto | flex-start | flex-end | center | baseline | stretch
    like align-items but per-item
  flex-grow
  flex-shrink
  flex-basis
  flex: flex-grow [flex-shrink] [flex-basis]
  order: ${pos}  // 0, 1 etc.

Example layouts:

1. [ [left]     [right]]

div display:flex
  div
    left
  div margin-left: auto
    right

margin-left will push [right] all the way to the right.

2. the same as in 1, but using justify-content: space-between

div style=display:flex; justify-content: space-between;
  div
    left
  div
    right

Flexbox links:
* https://hackernoon.com/11-things-i-learned-reading-the-flexbox-spec-5f0c799c776b
* https://codepen.io/enxaneta/full/adLPwv/ : visual showcase of flexbox properties
* https://css-tricks.com/flex-grow-is-weird/
* https://flexbox.io/ : 20 video tutorials, from beginning to some advanced layouts
* https://chriswrightdesign.com/experiments/using-flexbox-today/
* https://www.smashingmagazine.com/2016/11/css-grids-flexbox-and-box-alignment-our-new-system-for-web-layout/
* https://css-tricks.com/snippets/css/a-guide-to-flexbox/
* http://www.flexboxpatterns.com/home
* https://philipwalton.github.io/solved-by-flexbox/

---

Id: b4vlaqf8m63000aqbjog
#did
* posted https://www.reddit.com/r/golang/comments/6gtt61/advanced_command_execution_in_go_with_osexec/
* tweaked blog css to be readable on mobile. Still not great on my Nexus 5. I suck at CSS.
* https://audienceops.com/resources/videos/sell-to-strangers/ #watched
* https://github.com/kjk/quicknotes: fixed a bug of updating CreatedAt of note when updating existing note

2017-06-11
Id: b4uufok4qnvg00eh2kbg
#read #paypal #payments #seo #upwork

https://fman.io/blog/paypal-for-saas-99-problems/ describes using PayPal for implementing subscriptions for desktop software. Discussion: http://discuss.bootstrapped.fm/t/my-experiences-with-paypal-for-saas/5073/9

http://discuss.bootstrapped.fm/t/is-anyone-paying-for-seo-help-how-do-you-find-someone-who-is-doing-it-the-right-way-and-getting-results/1630/22 has seo tips for a specific site, but the advice would work for many others.

http://discuss.bootstrapped.fm/t/frustrated-with-upwork-etc-anyone-had-any-success/4550/9 : tips on how to hire people on upwork and similar sites. Also https://baremetrics.com/blog/startup-guide-to-hiring-remote-customer-support

---

Id: b4uufr44qnvg00eh2kc0
Title: Idea for GUI version of tig
#idea

Write a Mac and/or Windows GUI version of tig (https://github.com/jonas/tig). Tig has 4.5k stars on github, which implies a significant interest.

It could be implemented in JavaScript/HTML. It could have a web version that allows browsing any github repository and on desktop it could be done as Electron.

Or it could be done with https://sciter.com/. Or Winforms on Windows and Swift/Cocoa on Mac.

---

Id: b4uuftk4qnvg00eh2kd0

#idea #pdf

A website that allows comparing of poppler vs. mupdf vs. pdfium vs pdf.js rendering. Upload a PDF, render each page in each engine in both native size and down-scaled to a reasonably sized thumbnail for overview. The baisc layout would be:

[page 1 mupdf] [page 1 pdfium] [page 1 poppler]
[page 2 mupdf] [page 2 pdfium] [page 2 poppler]
...

Then one could click on the thumbnail to see comparison of the native size.

Bonus feature: some type of overlay comparison.

---

Id: b4uufvs4qnvg00eh2kdg
#idea #pdf

Write a tool to extract text from PDF files.

Upload the file and get text in plain text file and json (augmented with position information) and maybe even xml.

Limit size of PDF files. Upsell to $19 mac/windows. Write a command-line tool, maybe even open-sources, also upsell GUI version.

Good example of upselling to a better version: https://www.spyfu.com

---

Id: b4uuffk4qnvg00eh2kb0
#did
* https://github.com/kjk/quicknotes: add Id: and Tag: when exporting /raw/n raw note
* https://github.com/kjk/quicknotes: redirect http => https
* posted https://www.indiehackers.com/forum/post/-KmAWdcuUKZ0d3WjQTw1?commentId=-KmODyuvCnN_0ibCoIe-
* updated https://github.com/sumatrapdfreader/sumatrapdf/wiki to point to sumatra website, not notion
* posted https://news.ycombinator.com/item?id=14534154
* posted https://news.ycombinator.com/item?id=14534161
* posted https://blog.kowalczyk.info/article/wOYk/advanced-command-execution-in-go-with-osexec.html
* tweaked sumatra website
* blog: sha1-ify /css/main.css

2017-06-10
Id: b4u68hcvj43jdajdsuo0

#idea Build a web service that builds google sitemaps (https://support.google.com/webmasters/answer/183668?hl=en&ref_topic=4581190). It crawls the website and builds .xml or .txt file with links, describes how to submit it to google etc. It should use chrome headless.

It should aggressively cache the results to avoid re-crawling websites. Url should be /tools/build-submit-google-sitemap.html. Maybe use a domain like webtools.io/build-submit-google-sitemap.html

To make money limit web service to N links (100? 256?) and up-sell a $10-$30 windows/mac desktop app build on electron.

Basically, https://www.xml-sitemaps.com but better.

---

Id: b4u6894vj43jdajdsung
Title: Summary of Founders Battle Virtual Talks #7 about SEO with Michael Schwarz

#seo #watched https://www.youtube.com/watch?v=R29ypgkXHVw
Insights:
* 70% vistors come from search engines, 96% of those are from google
* 8 SEO must-haves for a website:
 * title tags
 * meta description
 * headings (h1)
 * URL
 * create unique landing pages
 * optimize alt & title image tags
 * choose the right CMS
 * create sitemaps

* 2 SEO nice-haves
 * rich snippets
 * link building

Page title is important ranking factor and is shown in search result.

Meta Description is shown in Google Search, so its quality can improve click-through from search results.

h1 is important ranking factor.

url is important ranking factor.

Google likes to rank one page for keyword, so if you target multiple keywords, you should have multiple page, each page targeting different keywords.

Don't try to optimize a single page for too many keywords.

Alt & title for image tags is important for ranking in image search.

Good CMS (e.g. WordPress) allows you to set those important things (page title, meta description etc.)

Sitemap is an xml or text file that lists pages on your website. You submit a sitemap to Google to help it index the website. More info: https://support.google.com/webmasters/answer/183668?hl=en&ref_topic=4581190

Rich snippets don't apply for everything but for e.g. review sites, you can add ranking for a given item that will be shown in search results.

Link building is tricky. You want your website to be linked from other high-ranking websites. But if you use shady tactics like buying links then Google doesn't like it and might penalize your website.

---

Id: b4u67n4vj43jdajdsun0

#did

* show day of the note in /dailynotes on blog
* added unique ids to daily notes
* wrote /tools/generate-unique-id so that I can easily get unique ids for daily notes
* handle Id: and Title: metadata for daily notes
* implemented /raw/n in quicknotes

2017-06-09
Id: b4u67ksvj43jdajdsumg
#read https://www.indiehackers.com/businesses/intrinio #business #startups

---

Id: b4u67isvj43jdajdsum0

#read http://floooh.github.io/2017/06/09/webassembly-demystified.html #webassembly

---

Id: b4u67bcvj43jdajdsul0
Title: Go is Moneyball For Programming Languages

#go #rant Go is a controversial language, often criticized for lack of sophistication. "We know how to do things better!".

I think of Go as Moneyball For Programming Languages: How to get maximum capability from minimal feature set.

Go makes much more sense when you look at it through "biggest bang for the buck" prism.

Go ruthlessly eliminates duplicate features and non-critical .

Enums? Can be replaced by idealized integers.

do/while loops? Can be replaced by slightly extended for.

Generics? You get the most common generic types built-in (slices and maps) but no user-defined generics.

Unit testing, benchmarking? You get that as part of standard library but it's ridiculusly minimal compared to, say, jUnit from Java world.

---

Id: b4u674cvj43jdajdsukg
Title: Summary of "The Mom Test" book about validating business ideas

#business #startups

"The Mom Test" (http://momtestbook.com/) is a very good book about how to validate business idea.

If you can't read or don't want to spend $10, the author also gave a few talks that cover the same ground and you can watch for free:
* https://www.youtube.com/watch?v=IuXhNJ3M_iM "PODIM 2014, Robert Fitzpatrick: Customer Development"
* https://www.youtube.com/watch?v=w4L0ZU7hMH4 "Rob Fitzpatrick - Getting Customer Development Right - Pioneers Festival 2012"
* https://www.youtube.com/watch?v=0LwbFZkyRKk "Rob Fitzpatrick - How to Learn from Customers When Everyone is Lying to You"
* https://www.youtube.com/watch?v=AFo2yQuqEsk "Rob Fitzpatrick @ Leanconf 2013 Keynote"
* https://www.youtube.com/watch?v=vqHR7CUPVbA&t=923s "Founders Battle - Virtual Talk #2 - Rob Fitzpatrick: "The mom test"
* https://www.youtube.com/watch?v=O_xjb7LB7VY "Rob Fitzpatrick - Prototyping Everything"
* https://www.youtube.com/watch?v=6PqpM4QM1JM "Idea Validation with Rob Fitzpatrick of dex.io [Blueprint Entrepreneur]"

Here's my summary, for the lazy.

So you have an idea for a software product/business. How to make sure that people want it?

Here are typical ways to do it:
* describe the idea, ask for feedback. Ask queations like "what do you think?", "would you buy it?"
* create a landing page, describe the product, collect e-mail addresses to guess-estimate the interest

Asking for feedback is bad because people are nice, they don't want to hurt your feelings so they'll either lie to you or will be way too optimistic about their interest in the product.

Rob talks about how to talk to people so that you get more accurate reading of their real interest.

It's best described as an example.

Let's say you want to do a cookbook app for iPad. You see that your mom has lots of cookbooks, so you interview her to validate the idea.

Here's how *not* to drive the conversation:

you > Hey mom, I have an idea for an coookbook app for an iPad.
mom > That sounds interesting. Tell me more. (thinking to herself: I've been cooking for 40 years, I don't need another cookbook)
you > It'll be $40, it'll have pictures for every recipe, you'll be able to share the recipies with friends and family, it'll have detailed instructions, a built in timer.
mom > That's great honey, I'm proud of you. Go for it.

Here's a better way:
you > Hey mom, I see you have an iPad. What are you using it for?
mom > Reading web, email, sometimes I'll download an app, like sudoku.
you > So how do you decide to buy an app.
mom > There's an app review section in the newspaper.
you > I noticed you have a lot of cookbooks. When was the last time you bought a cookbook?
mom > Oh, I've book cooking for 40 years, I don't need cookbooks. Those are mostly gifts.
you > So, you've never buy cookbooks?
mom > Come to think of it, I did buy a vegeterian cookbook because I want to improve my diet and I wanted to learn how to make vegetables more tasty.

In the first conversation potential customer lies because you're asking about hypotheticals.

In the second conversation you didn't even mention your idea but you asked about current behavior and you've learned that this particular person:
* is not a good customer for a basic cookbook
* they learn about new apps from the newspaper, so that would be a good place to advertise to reach them
* they might be interested in "niche" cookbook (vegeterian, popular ethnic trends)

---

Id: b4u66vkvj43jdajdsujg

#did
* implemented individual note view for notes
* added support for code syntax highlighting for notes
* https://github.com/sumatrapdfreader/sumatrapdf/pull/826
* http://discuss.bootstrapped.fm/t/is-anyone-paying-for-seo-help-how-do-you-find-someone-who-is-doing-it-the-right-way-and-getting-results/1630/19?u=kjk

---

Id: b4u66n4vj43jdajdsuj0
Title: remove duplicate strings from array, in Go

#go #snippet

```go
// RemoveDuplicateStrings removes duplicate strings from an array of strings.
// It's optimized for the case of no duplicates. It modifes a in place.
func RemoveDuplicateStrings(a []string) []string {
	if len(a) < 2 {
		return a
	}
	sort.Strings(a)
	writeIdx := 1
	for i := 1; i < len(a); i++ {
		if a[i-1] == a[i] {
			continue
		}
		if writeIdx != i {
			a[writeIdx] = a[i]
		}
		writeIdx++
	}
	return a[:writeIdx]
}
```

---

Id: b4u66i4vj43jdajdsui0

#read #systemd #go
https://tailordev.fr/blog/2017/06/09/deploying-a-go-app-with-systemd-socket-activation/
How to use systemd socket activation for for zero-downtime deployments

2017-06-08
Id: b4u66ksvj43jdajdsuig
#read http://www.kalzumeus.com/2008/01/28/why-you-shouldnt-pay-any-seo-you-can-afford/ #seo

---

Id: b4u66asvj43jdajdsuh0

Sciter (https://sciter.com/) is a tool for writing desktop UI quickly. It's like Electron but much smaller (5-8 MB vs. hundrends of megabytes). It's almost HTML and almost JavaScript.

It's also under-documented. Here's how I started playing with it:
* downloaded SDK (https://sciter.com/download/) into ~/Downloads folder and unzip
* create alias for the test app: alias sciter='/Users/kjk/Downloads/sciter-sdk/bin.osx/scapp'
* added the above alias to ~/.bash_profile

When I'm prototyping:
* create app.html and write the code
* to run: sciter app.html

Given how poorly documented Sciter is, I mostly use samples/ from the SDK to learn how do interesting things.

Ultimately the idea is that you use sciter .dll as part of your native Windows (C++ or .NET) or Mac (Objective-C or Swift), with majority of the interface implemented in Sciter's dialect of HTML/JavaScript, exposing functionality from native code as tiscript code.

Using scapp is a way to quickly prototype UI.

#sciter

---

Id: b4u667svj43jdajdsug0
Reading more blog posts from http://thestartuptoolkit.com/.

Insight: if your business is "better X", you should use X to make sure you're really improving on it. http://thestartuptoolkit.com/blog/2011/09/use-the-tools-youre-displacing/

#business

---

Id: b4u666cvj43jdajdsufg
#read https://blog.figma.com/webassembly-cut-figmas-load-time-by-3x-76f3f2395164.
Summary: compared to asm.js, webassembly loads much faster, parses faster and executes slightly faster. #webassembly

---

Id: b4u664cvj43jdajdsuf0
#postgres http://www.craigkerstiens.com/2017/06/08/working-with-time-in-postgres/

---

Id: b4u6624vj43jdajdsueg
Title: Idea for faster PDF rendering

#idea

For faster PDF rendering, re-compile it. PDF format is rather complicated, mostly text format. A PDF renderer first has to parse it into in-memory representation and then renders it.

Imagine a binary format that is designed for fast loading and one-time PDF => binary format compilation step. With the right format, parsing step could essentially be eliminated.

We could even improve rendering time with some additional optimizations.

For example, there are PDF documents with gigantic images (think 4000 x 4000 pixels) that could be resized to some reasonable value and saved in a format that is fastest to decode.

I'm sure there are optimizations possible for complex vector graphics (e.g. removing stuff that we know will be invisible).

---

Id: b4u65tsvj43jdajdsue0

#watched https://vimeo.com/77265280, trying to understand capabilities of WebRTC. I want to build VNC client in the browser but without ability to open tcp/udp connections it's not possible. And for local machines it's not possible even when using a proxy server (website talks to a proxy, proxy talks to VNC server and tunnels the data to website).

---

Id: b4u65rkvj43jdajdsudg

#inspiration "Every day for years, Trollope reported in his “Autobiography,” he woke in darkness and wrote from 5:30 a.m. to 8:30 a.m., with his watch in front of him." (http://www.newyorker.com/magazine/2004/06/14/blocked). If I was able to do coding like this, I would have written many more programs than I have.

---

Id: b4u65ocvj43jdajdsucg
#did

* Implemented worklog for blog.
* http://discuss.bootstrapped.fm/t/advice-on-getting-free-users-to-pay-for-a-pro-option-of-a-product/5084/3?u=kjk
* https://www.indiehackers.com/forum/post/-Km7Y53UZUwjvKGZECh6?commentId=-Km7xYYmTwQJPBGQwFQo
* https://github.com/kurin/blazer/issues/17

2017-06-07
Id: b4u65l4vj43jdajdsuc0
#go #did

Mostly finished local drive -> backblaze backup tool in Go. Backblaze is much cheaper at storage and bandwidth than S3 or Google Storage.

It's content-addressable store so I never re-upload files.

High-level architecture of the backup tool:
* you provide a directory to backup and list of extensions to backup (it's not a generic backup tool but a way to backup documents)
* the program traverses the directory recursively
* if a file has the right extension, calculate its sha1
* name of the file in backblaze is based on sha1 so it's O(1) to check if it's already there, in which case we skip the upload

Since the program is meant to be run many times over the same directories, I needed few tricks to make it faster:
* to avoid re-calculating sha1 of the file across the runs, I store previously calculated sha1 in a .csv "database". It's small enough that I can load existing database in memory on startup and update it by appending to .csv file as I calculate new sha1
* to speed up "is the file already there" check, I list all files in backblaze on startup, which gives me info about 1000 files per HTTP request (compared to more naive way of checking each file individually, which would require HTTP call for each file)

Go library I used for backblaze API had small bugs and inefficiencies, but the author fixed them (https://github.com/kurin/blazer/issues/16, https://github.com/kurin/blazer/issues/13, https://github.com/kurin/blazer/issues/14) within hours of reporting. Kudos because it's rare.

Also started on a very simple web front-end for listing the files. https://vuejs.org is great as a simple template library (have data -> render some html based on that). I know that Vue.js is much more than that, but it's perfect for simple templating as well. In the past I would laboriously create html as text in JavaScript or use some simple templating like mustache.

---

Id: b4u65fsvj43jdajdsubg

Playing a bit with https://sciter.com (trying to build a UI version of https://github.com/jonas/tig). Sciter is very promising in the sense of allowing to build UI quickly. However, it's badly documented. Good thing it has lots of examples in the SDK. #sciter #did
